# Parent Container Sizing Plan for React Flow Mindmap

## Problem Statement

In hierarchical graph visualizations with parent-child relationships, container nodes often need to be resized after the layout algorithm positions the child nodes. The challenge is that:

1. Child nodes are constrained by their parent boundaries with the `extent: "parent"` property
2. When the layout algorithm runs, it doesn't automatically resize parents to accommodate the new positions of children
3. Simply calculating bounding boxes may not work as expected since children are already constrained

## Current Implementation Analysis

The mindmap application currently uses:

- ELK (Eclipse Layout Kernel) for layout calculations
- A `hierarchyLayout.ts` module with `adjustParentChildPositions` to resize parents
- React Flow's `NodeResizer` component for manual resizing
- Custom container nodes that have header areas

The current flow has these key steps:
1. Layout request is triggered (user action or automatic)
2. ELK algorithm positions nodes based on hierarchy and connections
3. `adjustParentChildPositions` attempts to resize containers
4. The results are applied to the React Flow graph

## Proposed Solution

We need a more robust approach that:
1. Understands the true space requirements of children regardless of current constraints
2. Properly accounts for layout direction and spacing settings
3. Works with nested containers (containers within containers)
4. Preserves the visual hierarchy while ensuring everything fits

### Implementation Plan

#### 1. Enhanced Post-Layout Processing

Replace or enhance the current `adjustParentChildPositions` function in `hierarchyLayout.ts` with an improved algorithm that separates layout calculation from container sizing:

```typescript
export const enhancedContainerSizing = (
  layoutedNodes: Node[],
  layoutOptions: Record<string, any>,
  hierarchyDepths: Map<string, number> // Container nesting depth
): Node[] => {
  // Process containers bottom-up (most deeply nested first)
  const processingOrder = Array.from(hierarchyDepths.entries())
    .sort((a, b) => b[1] - a[1]) // Descending order by depth
    .map(([id]) => id);
    
  const nodeMap = new Map(layoutedNodes.map(node => [node.id, node]));
  const childrenMap = new Map<string, Node[]>();
  
  // Group children by parent
  layoutedNodes.forEach(node => {
    if (node.parentId) {
      if (!childrenMap.has(node.parentId)) {
        childrenMap.set(node.parentId, []);
      }
      childrenMap.get(node.parentId)!.push(node);
    }
  });
  
  // Process containers in order
  for (const containerId of processingOrder) {
    const container = nodeMap.get(containerId);
    const children = childrenMap.get(containerId) || [];
    
    if (container && children.length > 0) {
      // Calculate optimal container dimensions
      const {width, height, position} = calculateOptimalContainerSize(
        container,
        children,
        layoutOptions
      );
      
      // Update container dimensions
      nodeMap.set(containerId, {
        ...container,
        position,
        width,
        height,
        style: {
          ...container.style,
          width,
          height
        }
      });
    }
  }
  
  return Array.from(nodeMap.values());
};
```

#### 2. Optimal Container Size Calculation

Implement a specialized function for calculating the optimal container size based on the layout algorithm, direction, and spacing settings:

```typescript
function calculateOptimalContainerSize(
  container: Node,
  children: Node[],
  layoutOptions: Record<string, any>
): { width: number; height: number; position: { x: number; y: number } } {
  // Start with current container position
  const position = { ...container.position };
  
  // Direction-specific padding
  const direction = layoutOptions["elk.direction"] || "DOWN";
  const nodeSpacing = parseInt(layoutOptions["elk.spacing.nodeNode"] || "100");
  const layerSpacing = parseInt(layoutOptions["elk.layered.spacing.nodeNodeBetweenLayers"] || "150");
  
  // Calculate padding based on layout settings
  const padding = {
    horizontal: Math.max(LAYOUT_CONSTANTS.CONTAINER_PADDING.HORIZONTAL, nodeSpacing / 2),
    vertical: Math.max(LAYOUT_CONSTANTS.CONTAINER_PADDING.VERTICAL, layerSpacing / 2)
  };
  
  // Use the header height from layout constants
  const headerHeight = LAYOUT_CONSTANTS.HEADER_HEIGHT;
  
  // Calculate bounding box of all children
  let minX = Infinity;
  let minY = Infinity;
  let maxX = -Infinity;
  let maxY = -Infinity;
  
  children.forEach(child => {
    const childX = child.position.x;
    const childY = child.position.y;
    const childWidth = child.width || LAYOUT_CONSTANTS.NODE_DEFAULT_WIDTH;
    const childHeight = child.height || LAYOUT_CONSTANTS.NODE_DEFAULT_HEIGHT;
    
    minX = Math.min(minX, childX);
    minY = Math.min(minY, childY);
    maxX = Math.max(maxX, childX + childWidth);
    maxY = Math.max(maxY, childY + childHeight);
  });
  
  // Ensure container includes the header area
  minY = Math.min(minY, container.position.y + headerHeight);
  
  // Apply padding
  minX -= padding.horizontal;
  minY -= padding.vertical;
  maxX += padding.horizontal;
  maxY += padding.vertical;
  
  // Calculate dimensions
  const width = maxX - minX;
  const height = maxY - minY;
  
  // Adjust container position to match the new bounds
  position.x = minX;
  position.y = minY;
  
  return { width, height, position };
}
```

#### 3. Hierarchy Depth Calculation

Add a function to calculate the nesting depth of each container:

```typescript
function calculateContainerHierarchy(nodes: Node[]): Map<string, number> {
  const containerIds = new Set(
    nodes
      .filter(node => nodes.some(n => n.parentId === node.id))
      .map(node => node.id)
  );
  
  const parentMap = new Map<string, string>();
  nodes.forEach(node => {
    if (node.parentId) {
      parentMap.set(node.id, node.parentId);
    }
  });
  
  const depthMap = new Map<string, number>();
  
  function calculateDepth(nodeId: string): number {
    if (depthMap.has(nodeId)) {
      return depthMap.get(nodeId)!;
    }
    
    const parentId = parentMap.get(nodeId);
    if (parentId && containerIds.has(parentId)) {
      const depth = calculateDepth(parentId) + 1;
      depthMap.set(nodeId, depth);
      return depth;
    }
    
    depthMap.set(nodeId, 0);
    return 0;
  }
  
  containerIds.forEach(id => calculateDepth(id));
  return depthMap;
}
```

#### 4. Integration with Layout Pipeline

Modify the `applyLayout` function in `/src/Mindmap/Layout/core/index.ts` to use the enhanced container sizing:

```typescript
export const applyLayout = async (
  nodes: Node[],
  edges: Edge[],
  options: Record<string, any>
): Promise<{ nodes: Node[]; edges: Edge[] }> => {
  // Add container-specific options
  const containerOptions = stringifyNumericOptions({
    ...options,
    "elk.hierarchyHandling": "INCLUDE_CHILDREN",
    "elk.padding": `[left=${LAYOUT_CONSTANTS.CONTAINER_PADDING.HORIZONTAL}, top=${LAYOUT_CONSTANTS.CONTAINER_PADDING.VERTICAL}, right=${LAYOUT_CONSTANTS.CONTAINER_PADDING.HORIZONTAL}, bottom=${LAYOUT_CONSTANTS.CONTAINER_PADDING.VERTICAL}]`,
    "elk.aspectRatio": 1.5,
    "elk.partitioning.activate": true,
    "elk.layered.considerModelOrder.strategy": "NODES_AND_EDGES",
    "elk.contentAlignment": "V_TOP H_CENTER",
    "elk.layered.spacing.baseValue": 60,
    "elk.spacing.individual": 30,
    "elk.separateConnectedComponents": true,
    "elk.spacing.componentComponent": 80,
    "elk.layered.avoidOverlap": "true",
  });

  // First calculate the basic layout with hierarchy support
  const { nodes: layoutedNodes, edges: layoutedEdges } = await calculateLayout(
    nodes,
    edges,
    containerOptions
  );

  // Skip the rest if we don't have parent-child relationships
  const hasParentChildRelations = nodes.some((node) => node.parentId);
  if (!hasParentChildRelations) {
    return { nodes: layoutedNodes, edges: layoutedEdges };
  }
  
  // Calculate container hierarchy depths
  const hierarchyDepths = calculateContainerHierarchy(layoutedNodes);
  
  // Apply enhanced container sizing that respects layout settings
  const resizedNodes = enhancedContainerSizing(
    layoutedNodes, 
    containerOptions,
    hierarchyDepths
  );

  // Fix edges between containers by adjusting handle positions
  const finalEdges = adjustContainerEdgeHandles(
    resizedNodes,
    layoutedEdges,
    options["elk.direction"] || "DOWN"
  );

  return {
    nodes: resizedNodes,
    edges: finalEdges,
  };
};
```

#### 5. Adjust Layout Controls

Modify the layout controls to call the enhanced layout function:

```typescript
// In LayoutControls.tsx
const handleApplyLayout = useCallback(async () => {
  if (layoutInProgress || nodes.length === 0) return;

  try {
    setLayoutInProgress(true);

    let nodesToLayout: Node[] = [];
    if (selectedNodes.length < 1) {
      // Apply layout to top-level nodes
      nodesToLayout = nodeParentMap?.get("no-parent") || [];
    } else {
      // Apply layout to children of selected node
      nodesToLayout = nodeParentMap?.get(selectedNodes[0].id) || [];
    }
    
    if (nodesToLayout.length === 0) {
      console.warn("No nodes found to layout");
      return;
    }

    // Get relevant edges
    const relevantEdges = nodesToLayout
      .map((node) => edgeSourceMap.get(node.id))
      .flat()
      .filter((edge) => edge !== undefined) as Edge[];

    console.log(`Applying layout to ${nodesToLayout.length} nodes and ${relevantEdges.length} edges`);
    
    // Apply layout with enhanced container sizing
    const result = await onLayout(direction, nodesToLayout, relevantEdges);

    if (result && result.nodes) {
      trackUpdateNodes(result.nodes, nodesToLayout);
    }
  } catch (error) {
    console.error("Error applying layout:", error);
  } finally {
    setLayoutInProgress(false);
  }
}, [
  nodes,
  edges,
  selectedNodes,
  layoutInProgress,
  getElkOptions,
  setLayoutInProgress,
  setEdges,
]);
```

## Visual Examples

### Example 1: Simple Parent-Child Layout

Before:
```
┌─────────────────────┐
│ Parent Container    │
│ ┌───────┐           │
│ │ Child1 │           │
│ └───────┘           │
│                     │
└─────────────────────┘
```

After layout calculation where Child1 has moved outside the parent bounds:
```
┌─────────────────────┐
│ Parent Container    │
│                     │
│                     │
│                     │
└─────────────────────┘
       ┌───────┐
       │ Child1 │
       └───────┘
```

After enhanced container sizing:
```
┌───────────────────────────┐
│ Parent Container          │
│                           │
│                           │
│                           │
│       ┌───────┐           │
│       │ Child1 │           │
│       └───────┘           │
└───────────────────────────┘
```

### Example 2: Hierarchical Parent-Child Layout

Before:
```
┌───────────────────────────────────┐
│ Parent Container                  │
│ ┌────────────────┐  ┌────────────┐│
│ │ Child Container│  │ Child Node ││
│ │ ┌──────┐       │  │            ││
│ │ │Nested│       │  │            ││
│ │ └──────┘       │  │            ││
│ └────────────────┘  └────────────┘│
└───────────────────────────────────┘
```

After layout calculation with nested changes:
```
┌───────────────────────────────────┐
│ Parent Container                  │
│                                   │
│                                   │
│                                   │
└───────────────────────────────────┘
  ┌────────────────┐  
  │ Child Container│  
  │                │  
  │                │  
  │                │  
  └────────────────┘  
    ┌──────┐      
    │Nested│      
    └──────┘      
                   ┌────────────┐
                   │ Child Node │
                   │            │
                   │            │
                   └────────────┘
```

After enhanced container sizing (applied bottom-up):
```
┌─────────────────────────────────────────────────┐
│ Parent Container                                │
│                                                 │
│ ┌─────────────────────┐     ┌────────────┐      │
│ │ Child Container     │     │ Child Node │      │
│ │                     │     │            │      │
│ │    ┌──────┐         │     │            │      │
│ │    │Nested│         │     │            │      │
│ │    └──────┘         │     │            │      │
│ └─────────────────────┘     └────────────┘      │
│                                                 │
└─────────────────────────────────────────────────┘
```

## Recommended External Libraries

The ELK library already provides robust layout calculation, but we can leverage a few more specialized libraries for this task:

1. **elkjs** (already in use): Provides the base layout algorithms with hierarchical support
   - Documentation: https://www.eclipse.org/elk/reference/options.html
   - GitHub: https://github.com/kieler/elkjs

2. **d3-hierarchy**: Can be used for computing optimal container sizes based on child dimensions
   - Documentation: https://github.com/d3/d3-hierarchy
   - Methods like `d3.treemap()` could provide additional container sizing algorithms

3. **kiwi.js**: Constraint solver that could help enforce complex resizing rules
   - GitHub: https://github.com/IjzerenHein/kiwi.js
   - Useful for scenarios where container sizing must satisfy multiple constraints

## Implementation Considerations

1. **Performance Optimization**:
   - Cache calculated container sizes when appropriate
   - Implement incremental updates for large graphs
   - Consider using Web Workers for layout calculations

2. **User Experience**:
   - Add a subtle animation when containers resize
   - Consider adding UI controls for container padding settings
   - Add a "tight fit" mode vs "relaxed fit" option

3. **Edge Case Handling**:
   - Empty containers (no children)
   - Very large containers with many children
   - Deep nesting (containers within containers within containers)
   - Circular parent-child relationships (should be prevented)

## Conclusion

The proposed solution leverages the existing ELK layout algorithm while adding specialized post-processing to ensure containers properly encompass their children. By processing containers bottom-up and using layout-aware size calculations, we can maintain the visual hierarchy while ensuring proper sizing.

The solution doesn't require major architectural changes, instead focusing on enhancing the existing layout pipeline with more robust container sizing logic that's aware of the layout direction and spacing settings.